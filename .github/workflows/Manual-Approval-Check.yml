name: PR merge check

on:
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened, synchronize]

jobs:
  merge-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install requests

      - name: PR Manual Check Assignment
        env:
          SECRET_TOKEN: ${{ secrets.SECRET_TOKEN }}
          GITHUB_REPOSITORY: 'mk-mahina/PR-Merge-DryRun'
          PULL_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          import os
          import requests

          # Get environment variables
          token = os.environ['SECRET_TOKEN']
          repository = os.environ['GITHUB_REPOSITORY']
          pull_number = os.environ['PULL_NUMBER']

          # Set API URLs
          pr_url = f"https://api.github.com/repos/{repository}/pulls/{pull_number}"
          reviews_url = f"{pr_url}/requested_reviewers"

          # Set headers
          headers = {
              "Accept": "application/vnd.github.v3+json",
              "Authorization": f"token {token}"
          }

          # Check if the pull request is approved
          pr_response = requests.get(pr_url, headers=headers)
          pr_data = pr_response.json()

          if pr_data["state"] != "open":
              print("PR is not approved. Exiting.")
              exit(1)

          # Check if armin-mahina has been added as a reviewer to the pull request
          reviews_response = requests.get(reviews_url, headers=headers)
          reviews_data = reviews_response.json()
          reviewers = [reviewer["login"] for reviewer in reviews_data["users"]]

          if "armin-mahina" in reviewers:
              print("armin-mahina has already been added as a reviewer to the pull request.")
          else:
              reviewers_payload = {
                  "reviewers": ["armin-mahina"]
              }
              reviewers_response = requests.post(reviews_url, headers=headers, json=reviewers_payload)
              if reviewers_response.ok:
                  print("armin-mahina added as a reviewer to the pull request. Waiting for the approval")
              else:
                  print(f"Failed to add armin-mahina as a reviewer to the pull request. Response: {reviewers_response.text}")

      - name: Get Jira issue key from branch name
        id: get-jira-issue-key
        run: |
          echo "github.head_ref=${{ github.head_ref }}"
          echo "jira-issue-key=$(echo ${{ github.head_ref }} | sed -nE 's#^([A-Z]+-[0-9]+).*#\1#p')" >> $GITHUB_ENV
       
      - name: Show Jira issue key
        run: echo ${{ env.jira-issue-key }}

      
      - name: Transition Jira issue from pending PR --> pending PR QA
        env:
          JIRA_AUTH_TOKEN: ${{ secrets.JIRA_AUTH_TOKEN }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}          
          JIRA_TRANSITION_ID: "91"
        run: |    
          echo "jira-issue-key=${{ env.jira-issue-key }}"
          echo "JIRA_TRANSITION_ID=$JIRA_TRANSITION_ID"
          curl -D- -u $JIRA_USER:$JIRA_AUTH_TOKEN \
            -X POST \
            -H "Content-Type: application/json" \
            --data '{"transition": {"id": "'"$JIRA_TRANSITION_ID"'"}}' \
            $JIRA_BASE_URL/rest/api/2/issue/${{ env.jira-issue-key }}/transitions